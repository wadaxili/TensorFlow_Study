# -*- coding: utf-8 -*-
import time
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import cnn_mnist_inference
import cnn_mnist_train
import numpy as np

# 程序运行间隔十秒
EVAL_INTERVAL_SECS = 10

def evaluate(mnist):
    # 导出调用的graph
    with tf.Graph().as_default() as g:
        x = tf.placeholder(tf.float32, [
            mnist.validation.num_examples,
            cnn_mnist_inference.IMAGE_SIZE,
            cnn_mnist_inference.IMAGE_SIZE,
            cnn_mnist_inference.NUM_CHANNELS],
            name='x-input')
        y_ = tf.placeholder(
            tf.float32, [None, cnn_mnist_inference.OUTPUT_NODE], name='y_input')
        # 测试数集
        xs = mnist.validation.images
        reshape_xs = np.reshape(xs,(mnist.validation.num_examples,
                                    cnn_mnist_inference.IMAGE_SIZE,
                                    cnn_mnist_inference.IMAGE_SIZE,
                                    cnn_mnist_inference.NUM_CHANNELS))
        validate_feed = {x: reshape_xs,
                         y_: mnist.validation.labels}

        # 前向传播过程的输出结果y
        y = cnn_mnist_inference.inference(x, False, None)
        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        # 变量重命名来加载模型
        variable_averages = tf.train.ExponentialMovingAverage(
            cnn_mnist_train.MOVING_AVERAGE_DECAY
        )
        variables_to_restore = variable_averages.variables_to_restore()
        saver = tf.train.Saver(variables_to_restore)

        while True:
            with tf.Session() as sess:
                # get_checkpoint_state自动获取最新模型文件名
                ckpt = tf.train.get_checkpoint_state(cnn_mnist_train.MODEL_SAVE_PATH)
                if ckpt and ckpt.model_checkpoint_path:
                    saver.restore(sess, ckpt.model_checkpoint_path)
                    # 获得文件模型保存时的轮数（global-step）
                    global_step = ckpt.model_checkpoint_path.split('/')[-1].split('-')[-1]
                    accuracy_score = sess.run(accuracy, feed_dict=validate_feed)
                    print("After %s training steps, validaton"
                          "accuracy = %g" % (global_step, accuracy_score))
                else:
                    print('No checkpoint file found')
                    return
                time.sleep(EVAL_INTERVAL_SECS)

def main(argv=None):
    mnist = input_data.read_data_sets("/tmp/data", one_hot=True)
    evaluate(mnist)

if __name__ == '__main__':
    tf.app.run()
